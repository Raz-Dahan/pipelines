pipeline {
    agent any
    environment {
        AlpacaPackage = "AlpacaPackage${env.BUILD_NUMBER}.tar.gz"
        TEST_IP = sh(script: "aws ec2 describe-instances --region eu-central-1 --filters Name=tag:platform,Values=test --query 'Reservations[].Instances[].PublicIpAddress' --output text", returnStdout: true).trim()
        PROD_IP = sh(script: "aws ec2 describe-instances --region eu-central-1 --filters Name=tag:platform,Values=production --query 'Reservations[].Instances[].PublicIpAddress' --output text", returnStdout: true).trim()
    }
    triggers {
        pollSCM('*/1 * * * *')
    }
    stages {
        stage('Cleanup') {
            steps {
                sh 'echo "Cleaning up on workspace..."'
                sh 'rm -rf *'
            }
        }
        stage('Build') {
            steps {
                sh 'echo "Cloning from GitHub..."'
                sh 'git clone https://github.com/Raz-Dahan/flask-project.git'
                sh 'echo "Packaging..."'
                sh 'tar -czvf ${AlpacaPackage} flask-project'
                sh 'echo "Pushing to S3..."'
                sh 'aws s3 cp ${AlpacaPackage} s3://raz-flask-artifacts'
                sh 'echo "Making sure that the last five build packages on S3..."'
                script {
                    def objectsNum = sh(script: 'aws s3 ls s3://raz-flask-artifacts --recursive | wc -l', returnStdout: true).trim().toInteger()
                    if (objectsNum > 5) {
                        def oldestObject = sh(script: 'aws s3 ls s3://raz-flask-artifacts --recursive 2> /dev/null | head -n 1 | awk \'{print $NF}\'', returnStdout: true).trim()
                        sh "aws s3 rm s3://raz-flask-artifacts/${oldestObject}"
                    }
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    sh 'echo "Copying S3 object to EC2..."'
                    sh 'ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/raz-key.pem ec2-user@${TEST_IP} "aws s3 cp s3://raz-flask-artifacts/${AlpacaPackage} /home/ec2-user/${AlpacaPackage}"'
                    sh 'echo "Unpacking and start the flask..."'
                    sh """ 
                    ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/raz-key.pem ec2-user@${TEST_IP} '
                    tar -xvf /home/ec2-user/${AlpacaPackage}
                    rm -r ${AlpacaPackage}
                    /bin/bash ./flask-project/deploy.sh
                    '
                    """
                    sh 'echo "Running tests..."'
                    sh '/bin/bash "/var/lib/jenkins/workspace/flask pipeline/flask-project/tests.sh"'
                }
            }
        }
        stage ('Aprove') {
            steps {
                sh 'echo "Waiting for aproval..."'
                // For auto aproval add '//' before input line, for manual aproval remove '//' from input line
                // input 'Do you want to deploy project to production?'
            }
        }
        stage('Deploy') {
            steps {
                sh 'echo "Copying S3 object to ec2..."'
                sh 'ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/raz-key.pem ec2-user@${PROD_IP} "aws s3 cp s3://raz-flask-artifacts/${AlpacaPackage} /home/ec2-user/${AlpacaPackage}"'
                sh 'echo "Unpacking and start the flask..."'
                sh """ 
                ssh -o StrictHostKeyChecking=no -i /var/lib/jenkins/raz-key.pem ec2-user@${PROD_IP} '
                tar -xvf /home/ec2-user/${AlpacaPackage}
                rm -r ${AlpacaPackage}
                /bin/bash ./flask-project/deploy.sh
                '
                """
            }
        }   
    }
}
